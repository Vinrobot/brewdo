#!/bin/bash
#
# Copyright (c) 2014 Matt Behrens.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e # stop on error
set -x # for debugging. we'll drop it later

# save our called name
me="$0"

# Homebrew owner username
user=_homebrew

# Homebrew home
brewhome=/usr/local

# command-line prefix for sudo sandboxing
sudo='sudo -u _homebrew'

check_user () {
  # check that the Homebrew owner exists
  if id -u ${user} >/dev/null 2>&1; then
    return 0
  else
    echo user account ${user} does not exist >&2
    return 1
  fi
}

check_home_exists () {
  # check the Homebrew home is present
  if [ -d ${brewhome} ]; then
    return 0
  else
    echo Homebrew home ${brewhome} does not exist >&2
    return 1
  fi
}

check_home_owner () {
  # check the Homebrew home has proper ownership
  if [ `find ${brewhome} -depth 0 -user ${user} | wc -l` = 1 ]; then
    return 0
  else
    echo Homebrew home ${brewhome} has wrong owner >&2
    return 1
  fi
}

check_root () {
  # ensure root
  if [ `id -u` != 0 ]; then
    echo root privileges are required; try sudo >&2
    return 1
  fi
}

add_user () {
  # abandon with success if user already exists
  if id -u ${user} >/dev/null 2>&1; then
    echo user ${user} already exists >&2
    return 0
  fi

  check_root || return 1

  # inspired by <https://serverfault.com/a/532860/115137>
  # search for an unused uid 500 or below
  for uid in `seq 500 0`; do
    if ! id -u ${uid} >/dev/null 2>&1; then

      # check if a matching gid is present
      if ! dscl /Local/Default -ls Groups gid | grep -q [^0-9]${uid}\$; then

        # build out the account
        cg="dscl /Local/Default -create Groups/${user}"
        cu="dscl /Local/Default -create Users/${user}"
        du="dscl /Local/Default -delete /Users/${user}"

        ${cg}
        ${cg} Password \*
        ${cg} PrimaryGroupID ${uid}
        ${cg} RealName "Homebrew Owner"

        ${cu}
        ${cu} NFSHomeDirectory /var/empty
        ${cu} Password \*
        ${cu} PrimaryGroupID ${uid}
        ${cu} RealName "Homebrew Owner"
        ${cu} UniqueID ${uid}
        ${cu} UserShell /usr/bin/false

        ${du} AuthenticationAuthority
        ${du} PasswordPolicyOptions

        # stop searching
        break

      fi

    fi
  done

  # if we hit 0, we failed
  if [ ${uid} = 0 ]; then
    echo no free uid to create the ${user} user >&2
    return 1
  fi

  return 0
}

del_user () {
  # abandon with success if user doesn't exist
  if ! id -u ${user} >/dev/null 2>&1; then
    echo user ${user} does not exist >&2
    return 0
  fi

  check_root || return 1

  dscl /Local/Default -delete Users/${user}
  dscl /Local/Default -delete Groups/${user}
}

case $1 in

  adduser)
    # only set up the Homebrew owner
    add_user || exit 1
    ;;

  brew)
    shift
    if [ x$1 = xhelp -o x$1 = xlist ]; then

      # help and list can be run without sandboxing
      brew "$@"

    else

      # escape from the current directory in case the Homebrew owner
      # doesn't have read rights here
      cd /

      # run the wrapped brew command as the Homebrew owner
      ${sudo} "${me}" _brew "$@"

    fi
    ;;

  _brew)
    # create a temporary home (used by node, at least)
    export HOME=`mktemp -d /tmp/brewdo.XXXXXX`
    
    # clean up on exit
    trap "rm -rf ${HOME}" EXIT

    # finally run the brew command
    shift
    HOMEBREW_LOGS=/var/log/homebrew brew "$@"
    ;;

  checkup)
    # checks various requirements for brewdo operation
    check_user || exit 1
    check_home_exists || exit 1
    check_home_owner || exit 1
    ;;

  deluser)
    # delete the Homebrew owner
    del_user || exit 1
    ;;

  *)
    command=`basename $0`
    cat <<EOT >&2
usage: ${command} brew [BREWARGS ...]
   or: ${command} checkup
   or: ${command} adduser\|deluser
EOT
    ;;

esac

# vim: tabstop=8 expandtab shiftwidth=2 softtabstop=2
