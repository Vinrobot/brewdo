#!/bin/bash
#
# Copyright (c) 2014 Matt Behrens.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e # stop on error
if [ x${BREWDO_DEBUG} != x ]; then
  set -x # for debugging
fi

# save our called name
me="$0"

# Homebrew owner username
brewuser=_homebrew

# Homebrew home directory
brewhome=/usr/local

# Homebrew log directory
brewlog=/var/log/homebrew

# command-line prefix for sudo sandboxing
sudo="sudo -u ${brewuser}"

check_user () {
  # check that the Homebrew owner exists
  id -u ${brewuser} >/dev/null 2>&1 || return 1
  return 0
}

check_owner () {
  # check the passed directory is owner by the Homebrew owner
  [ `find $1 -depth 0 -user ${brewuser} | wc -l` = 1 ] || return 1
  return 0
}

check_home_exists () {
  # check the Homebrew home is present
  [ -d ${brewhome} ] || return 1
  return 0
}

check_home_owner () {
  # check the Homebrew home has proper ownership
  check_owner ${brewhome} || return 1
  return 0
}

check_log_exists () {
  # check the Homebrew log directory is present
  [ -d ${brewlog} ] || return 1
  return 0
}

check_log_owner () {
  # check the Homebrew log directory has proper ownership
  check_owner ${brewlog} || return 0
  return 0
}

check_root () {
  # ensure root or complain
  if [ `id -u` != 0 ]; then
    echo 'root privileges are required; try sudo' >&2
    return 1
  fi
}

add_user () {
  # fail if user already exists
  if check_user; then
    echo Homebrew owner ${user} already exists >&2
    return 1
  fi

  check_root || return 1

  # inspired by <https://serverfault.com/a/532860/115137>
  # search for an unused uid 500 or below
  for uid in `seq 500 0`; do
    if ! id -u ${uid} >/dev/null 2>&1; then

      # check if a matching gid is present
      if ! dscl /Local/Default -ls Groups gid | grep -q [^0-9]${uid}\$; then

        # build out the account
        cg="dscl /Local/Default -create Groups/${brewuser}"
        cu="dscl /Local/Default -create Users/${brewuser}"
        du="dscl /Local/Default -delete /Users/${brewuser}"

        ${cg}
        ${cg} Password \*
        ${cg} PrimaryGroupID ${uid}
        ${cg} RealName "Homebrew Owner"

        ${cu}
        ${cu} NFSHomeDirectory /var/empty
        ${cu} Password \*
        ${cu} PrimaryGroupID ${uid}
        ${cu} RealName "Homebrew Owner"
        ${cu} UniqueID ${uid}
        ${cu} UserShell /usr/bin/false

        ${du} AuthenticationAuthority
        ${du} PasswordPolicyOptions

        # stop searching
        break

      fi

    fi
  done

  # if we hit 0, we failed
  if [ ${uid} = 0 ]; then
    echo no free uid to create the ${brewuser} user >&2
    return 1
  fi

  return 0
}

del_user () {
  if ! check_user; then
    echo Homebrew owner ${brewuser} does not exist >&2
    return 1
  fi

  dscl /Local/Default -delete Users/${brewuser}
  dscl /Local/Default -delete Groups/${brewuser}
}

create_log_dir () {
  # create the Homebrew log directory
  mkdir ${brewlog}
  chmod 0755 ${brewlog}
  chown ${brewuser} ${brewlog}
}

install_homebrew () {
  # make home if nonexistent
  check_home_exists || mkdir ${brewhome} || return 1

  # set ownership on home and key directories
  for dir in ${brewhome} ${brewhome}/bin ${brewhome}/share \
      ${brewhome}/share/man ${brewhome}/share/man/man*; do
    if [ -d ${dir} ]; then
      chown ${brewuser} ${dir} || return 1
    fi
  done

  # clone Homebrew into home
  ${sudo} git clone \
    https://github.com/Homebrew/homebrew.git ${brewhome} || return 1
}

check_sudoers_d_exists () {
  # check to see if sudoers.d exists
  [ -d /etc/sudoers.d ] || return 1
  return 0
}

check_sudoers_d_config () {
  # check for an #includedir statement referencing sudoers.d
  grep '^#includedir\s\s*/etc/sudoers.d' /etc/sudoers >/dev/null 2>&1 || \
    return 1
  return 0
}

check_sudoers_d_brewdo () {
  # check for the existence of the brewdo config in sudoers.d
  [ -f /etc/sudoers.d/brewdo ] || return 1
  return 0
}

create_sudoers_d () {
  # create /etc/sudoers.d
  mkdir /etc/sudoers.d || return 1
  chmod 0550 /etc/sudoers.d || return 1
}

add_sudoers_d_config () {
  # add configuration to /etc/sudoers to reference /etc/sudoers.d
  tempfile=`mktemp /tmp/brewdo.XXXXXX`
  chown root:wheel ${tempfile} || return 1
  chmod 0440 ${tempfile} || return 1
  mv -n ${tempfile} /etc/sudoers.tmp || return 1
  trap 'rm -f /etc/sudoers.tmp' EXIT
  cat /etc/sudoers >>/etc/sudoers.tmp || return 1
  cat <<EOT >>/etc/sudoers.tmp || return 1
# Added by brewdo to safely install configurations to /etc/sudoers.d.
# It is safe to leave this here even if you stop using brewdo.

#includedir /etc/sudoers.d

EOT
  visudo -cf /etc/sudoers.tmp || return 1
  mv /etc/sudoers.tmp /etc/sudoers || return 1
}

add_sudoers_d_brewdo () {
  # add brewdo to /etc/sudoers.d
  tempfile=`mktemp /tmp/brewdo.XXXXXX`
  chown root:wheel ${tempfile} || return 1
  chmod 0440 ${tempfile} || return 1
  cat <<EOT >>${tempfile} || return 1
# brewdo configuration to sandbox Homebrew operations.  This file is
# safe to delete if you are no longer using brewdo.

%admin  ALL=(${brewuser}) SETENV: ${brewhome}/bin/brew

EOT
  visudo -cf ${tempfile} || return 1
  mv ${tempfile} /etc/sudoers.d/brewdo || return 1
}

case $1 in

  adduser)
    # only set up the Homebrew owner
    add_user || exit 1
    ;;

  brew)
    shift
    if [ \
      x$1 = x--env -o \
      x$1 = xconfig -o \
      x$1 = xhelp -o \
      x$1 = xhome -o \
      x$1 = xinfo -o \
      x$1 = xlist -o \
      x$1 = xoptions -o \
      x$1 = xsearch ]; then

      # these commands can be run without sandboxing
      brew "$@"

    else

      # escape from the current directory in case the Homebrew owner
      # doesn't have read rights here
      cd /

      # run the wrapped brew command as the Homebrew owner
      ${sudo} "${me}" _brew "$@"

    fi
    ;;

  _brew)
    # create a temporary home (used by node, at least)
    export HOME=`mktemp -d /tmp/brewdo.XXXXXX`

    # clean up on exit
    trap "rm -rf ${HOME}" EXIT

    # finally run the brew command
    shift
    HOMEBREW_LOGS=${brewlog} brew "$@"
    ;;

  checkup)
    # checks various requirements for brewdo operation
    err=0
    if ! check_user; then
      echo Homebrew owner ${brewuser} does not exist >&2
      err=1
    fi
    if ! check_home_exists; then
      echo Homebrew home ${brewhome} nonexistent >&2
      err=1
    else
      if ! check_home_owner; then
        echo Homebrew home ${brewhome} not owned by ${brewuser} >&2
        err=1
      fi
    fi
    if ! check_log_exists; then
      echo Homebrew log directory ${brewlog} nonexistent >&2
      err=1
    else
      if ! check_log_owner; then
        echo Homebrew log directory ${brewlog} not owned by ${brewuser} >&2
        err=1
      fi
    fi
    if ! check_sudoers_d_exists; then
      echo /etc/sudoers.d nonexistent >&2
      err=1
    else
      if [ -r /etc/sudoers ]; then
        if ! check_sudoers_d_config; then
          echo /etc/sudoers does not includedir /etc/sudoers.d >&2
          err=1
        else
          if ! check_sudoers_d_brewdo; then
            echo /etc/sudoers.d/brewdo does not exist >&2
            err=1
          fi
        fi
      else
        echo cannot check /etc/sudoers, assuming OK >&2
      fi
    fi
    exit ${err}
    ;;

  deluser)
    # delete the Homebrew owner
    del_user || exit 1
    ;;

  install)
    if ! check_user; then
      add_user || exit 1
    else
      echo Homebrew owner ${brewuser} already exists, skipping >&2
    fi
    if ! check_log_exists; then
      create_log_dir || exit 1
    else
      echo Homebrew log directory ${brewlog} already exists, skipping >&2
    fi
    if ! check_sudoers_d_brewdo; then
      if ! check_sudoers_d_config; then
        if ! check_sudoers_d_exists; then
          create_sudoers_d
        else
          echo /etc/sudoers.d already exists, skipping >&2
        fi
        add_sudoers_d_config || exit 1
      else
        echo /etc/sudoers.d config already exists in /etc/sudoers, skipping >&2
      fi
      add_sudoers_d_brewdo || exit 1
    else
      echo brewdo config already exists in /etc/sudoers.d, skipping >&2
    fi
    install_homebrew || exit 1

    cat <<EOT >&2
All set!

To make brewdo simpler to you use, you can also add an alias to your
.profile, e.g.

    alias brew='brewdo brew'

Thanks for trying brewdo, and please be sure to let me know what you
think!
                                        -- Matt Behrens <matt@zigg.com>

EOT
    ;;

  *)
    command=`basename $0`
    cat <<EOT >&2
usage: ${command} brew [BREWARGS ...]
   or: ${command} checkup
   or: sudo ${command} install
   or: sudo ${command} adduser|deluser
EOT
    ;;

esac

# vim: tabstop=8 expandtab shiftwidth=2 softtabstop=2
