#!/usr/bin/env ruby
#
# Copyright (c) 2014 Matt Behrens.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

HOMEBREW_USER = '_homebrew'
HOMEBREW_HOME = '/usr/local'
HOMEBREW_LOGS = '/var/log/homebrew'

require 'fileutils'
require 'etc'

# check the Homebrew owner account exists
def is_owner_present?
  begin
    Etc.getpwnam(HOMEBREW_USER)
    true
  rescue ArgumentError
    false
  end
end

# get Homebrew owner uid
def get_owner_uid
  Etc.getpwnam(HOMEBREW_USER).uid
end

# check that a directory is owned and writable by the Homebrew owner
def is_owned_writable_by_owner?(directory)
  stat = File.stat(directory)
  stat.uid == get_owner_uid and (stat.mode & 0700 == 0700)
end

# check that the Homebrew home is owned and writable by the Homebrew
# owner
def is_home_owned_writable_by_owner?
  is_owned_writable_by_owner?(HOMEBREW_HOME)
end
  
# check that the Homebrew log directory is owned and writable by the
# Homebrew owner
def is_log_owned_writable_by_owner?
  is_owned_writable_by_owner?(HOMEBREW_LOGS)
end

# check that we are root
def is_root?
  Process.euid == 0
end

class RootRequiredError < StandardError
end

# require root
def require_root
  raise RootRequiredError.new('root required; try sudo') unless is_root?
end

# find an unused uid suitable for the Homebrew owner
def find_unused_uid
  500.downto(1) do |uid|
    begin
      Etc.getpwuid(uid)
    rescue ArgumentError
      # getpwuid raises ArgumentError when the uid in question is not
      # found, so this uid is free; now check gid
      begin
        Etc.getgrgid(uid)
      rescue ArgumentError
        # gid is also free (same logic) so we can use this
        return uid
      end
    end
  end
  return nil
end

class OwnerExistsError < StandardError
end

class NoFreeUidError < StandardError
end

# execute a dscl command, raising an error on failure
def dscl(*args)
  unless system(['/usr/bin/dscl', 'dscl'], '/Local/Default', *args)
    raise ArgumentError.new('dscl /Local/Default ' + args.join(' '))
  end
end

# calculate directory service record paths
def record_paths
  ['/Groups/' + HOMEBREW_USER, '/Users/' + HOMEBREW_USER]
end

# add the Homebrew owner account, raising an error on failure
def cmd_adduser
  require_root
  raise OwnerExistsError.new('owner account exists') if is_owner_present?

  uid = find_unused_uid
  raise NoFreeUidError.new('no free uid for owner account') if uid == nil

  group_path, user_path = record_paths

  dscl('-create', group_path)
  [
    ['Password', '*'],
    ['PrimaryGroupID', uid.to_s],
    ['RealName', 'Homebrew Owner'],
  ].each do |pair|
    dscl('-create', group_path, pair[0], pair[1])
  end

  dscl('-create', user_path)
  [
    ['HomeDirectory', '/var/empty'],
    ['Password', '*'],
    ['PrimaryGroupID', uid.to_s],
    ['RealName', 'Homebrew Owner'],
    ['UniqueID', uid.to_s],
    ['UserShell', '/usr/bin/false'],
  ].each do |pair|
    dscl('-create', user_path, pair[0], pair[1])
  end

  ['AuthenticationAuthority', 'PasswordPolicyOptions'].each do |key|
    dscl('-delete', user_path, key)
  end
end

# delete homebrew owner account, raising an error on failure
def cmd_deluser
  require_root

  group_path, user_path = record_paths

  dscl('-delete', group_path)
  dscl('-delete', user_path)
end 

# create Homebrew home 
def create_homebrew_home
  require_root

  # /usr/local generally exists, so it should not be a failure if it
  # does
  Dir.mkdir(HOMEBREW_HOME) unless Dir.exists?(HOMEBREW_HOME)
  uid = get_owner_uid
  File.chown(uid, nil, HOMEBREW_HOME)
end

# create Homebrew log directory
def create_homebrew_log
  require_root

  Dir.mkdir(HOMEBREW_LOGS)
  uid = get_owner_uid
  File.chown(uid, nil, HOMEBREW_LOGS)
  File.chmod(0755, HOMEBREW_LOGS)
end

class GitCloneError < StandardError
end

# run a Homebrew command
def cmd_brew(*args)
  brew_bin = HOMEBREW_HOME + '/bin/brew'

  # some Homebrew commands can be called directly
  if [
    '--env', 'config', 'help', 'home', 'info', 'list', 'options', 'search'
  ].member?(args[0])
    system([brew_bin, 'brew'], *args)
    return $?.to_i >> 8
  else
    return cmd_do(brew_bin, *args)
  end
end

# run an arbitrary command inside the brewdo sandbox
def cmd_do(*args)
  brewdo_bin = File.expand_path($0)
  
  Dir.chdir('/')
  system(
    ['/usr/bin/sudo', 'sudo'], '-u', HOMEBREW_USER,
    brewdo_bin, '_do', *args
  )
  return $?.to_i >> 8
end

# run an arbitrary command with environment etc.; intended to be run
# inside the sandbox
def cmd__do(*args)
  temphome = `mktemp -dt brewdo`.chop
  at_exit do
    FileUtils.remove_entry_secure(temphome)
  end

  ENV['HOME'] = temphome
  ENV['HOMEBREW_LOG'] = HOMEBREW_LOGS
  system(*args)
  return $?.to_i >> 8
end

# set up Homebrew with brewdo
def cmd_install
  require_root

  cmd_adduser
  create_homebrew_home
  create_homebrew_log

  raise GitCloneError.new('Homebrew clone failed') unless system(
    ['/usr/bin/sudo', 'sudo'], '-u', HOMEBREW_USER,
    '/usr/bin/git', 'clone', 'https://github.com/Homebrew/homebrew.git',
    HOMEBREW_HOME
  )
end

cmd_args = ARGV[1, ARGV.length - 1]

case ARGV[0]

when 'brew'
  exit cmd_brew(*cmd_args)

when 'do'
  exit cmd_do(*cmd_args)

when '_do'
  exit cmd__do(*cmd_args)

when 'install'
  cmd_install

when 'adduser'
  cmd_adduser

when 'deluser'
  cmd_deluser

else
  puts <<-EOT
usage: brewdo brew COMMAND [ARGS [ARGS]...]
       brewdo do COMMAND [ARGS [ARGS]...]
       sudo brewdo install
       sudo brewdo adduser|deluser
EOT

end

# vim: tabstop=8 expandtab shiftwidth=2 softtabstop=2
